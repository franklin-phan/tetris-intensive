{"version":3,"sources":["utils/index.js","reducers/game-reducer.js","actions/index.js","reducers/index.js","components/GridSquare.js","components/GridBoard.js","components/NextBlock.js","components/ScoreBoard.js","components/Controls.js","components/MessagePopup.js","App.js","serviceWorker.js","index.js"],"names":["gridDefault","array","row","push","col","shapes","randomShape","min","max","length","Math","floor","random","defaultState","grid","shape","rotation","x","y","nextShape","isRunning","score","speed","gameOver","nextRotation","canMoveTo","currentShape","proposedX","proposedY","possibleRow","undefined","addBlockToGrid","blockOffGrid","block","newGrid","checkRows","completedRows","indexOf","splice","unshift","Array","fill","gameReducer","state","action","type","newRotation","maybeY","obj","newState","reducers","combineReducers","game","GridSquare","props","classes","color","className","GridBoard","requestRef","useRef","lastUpdateTimeRef","progressTimeRef","dispatch","useDispatch","useSelector","blockColor","gridSquares","map","rowArray","square","blockX","blockY","k","key","update","time","current","requestAnimationFrame","deltaTime","useEffect","cancelAnimationFrame","NextBlock","ScoreBoard","onClick","e","Controls","handleKeys","onKeyEvent","disabled","MessagePopup","message","isHidden","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e91bbc0b.chunk.js","sourcesContent":["export const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n// Returns the default grid\nexport const gridDefault = () => {\nconst rows = 18\nconst cols = 10\nconst array = []\n\nfor (let row = 0; row < rows; row++) {\n    array.push([])\n    for (let col = 0; col < cols; col++) {\n        array[row].push(0)\n    }\n}\nreturn array\n}\n\n\n\n  // Define block shapes and their rotations as arrays.\nexport const shapes = [\n    // none\n    [[[0,0,0,0],\n      [0,0,0,0],\n      [0,0,0,0],\n      [0,0,0,0]]],\n  \n    // I\n    [[[0,0,0,0],\n      [1,1,1,1],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,0,0],\n      [0,1,0,0],\n      [0,1,0,0]]],\n  \n    // T\n    [[[0,0,0,0],\n      [1,1,1,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [1,1,0,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [1,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,1,0],\n      [0,1,0,0],\n      [0,0,0,0]]],\n  \n    // L\n    [[[0,0,0,0],\n      [1,1,1,0],\n      [1,0,0,0],\n      [0,0,0,0]],\n  \n     [[1,1,0,0],\n      [0,1,0,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,0,1,0],\n      [1,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,0,0],\n      [0,1,1,0],\n      [0,0,0,0]]],\n  \n    // J\n    [[[1,0,0,0],\n      [1,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,1,0],\n      [0,1,0,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,0,0,0],\n      [1,1,1,0],\n      [0,0,1,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,0,0],\n      [1,1,0,0],\n      [0,0,0,0]]],\n  \n    // Z\n    [[[0,0,0,0],\n      [1,1,0,0],\n      [0,1,1,0],\n      [0,0,0,0]],\n  \n     [[0,0,1,0],\n      [0,1,1,0],\n      [0,1,0,0],\n      [0,0,0,0]]],\n  \n    // S\n    [[[0,0,0,0],\n      [0,1,1,0],\n      [1,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,1,0],\n      [0,0,1,0],\n      [0,0,0,0]]],\n  \n    // O\n    [[[0,1,1,0],\n      [0,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]]]\n  ]\n// Random Shape\nexport const randomShape = () => {\n    return random(1, shapes.length - 1)\n  }\n\n  // Return the default state for the game\nexport const defaultState = () => {\n    return {\n      // Create an empty grid\n      grid: gridDefault(),\n      // Get a new random shape\n      shape: randomShape(),\n      // set rotation of the shape to 0\n      rotation: 0,\n      // set the 'x' position of the shape to 5 and y to -4, which puts the shape in the center of the grid, above the top\n      x: 5,\n      y: -4,\n      // set the index of the next shape to a new random shape\n      nextShape: randomShape(),\n      // Tell the game that it's currently running\n      isRunning: true,\n      // Set the score to 0\n      score: 0,\n      // Set the default speed\n      speed: 1000,\n      // Game isn't over yet\n      gameOver: false\n    }\n  }\n\n  // Returns the next rotation for a shape\n// rotation can't exceed the last index of the the rotations for the given shape.\nexport const nextRotation = (shape, rotation) => {\n    return (rotation + 1) % shapes[shape].length\n}\n\nexport const canMoveTo = (shape, grid, x, y, rotation) => {\n    const currentShape = shapes[shape][rotation]\n    // Loop through all rows and cols of the **shape**\n    for (let row = 0; row < currentShape.length; row++) {\n        for (let col = 0; col < currentShape[row].length; col++) {\n            // Look for a 1 here\n            if (currentShape[row][col] !== 0) {\n                // x offset on grid\n                const proposedX = col + x\n                // y offset on grid\n                const proposedY = row + y\n                if (proposedY < 0) {\n                    continue\n                }\n                // Get the row on the grid\n                const possibleRow = grid[proposedY]\n                // Check row exists\n                if (possibleRow) {\n                    // Check if this column in the row is undefined, if it's off the edges, 0, and empty\n                    if (possibleRow[proposedX] === undefined || possibleRow[proposedX] !== 0) {\n                        // undefined or not 0 and it's occupied we can't move here.\n                        return false\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n    }\n    return true\n}\n\n// Adds current shape to grid\nexport const addBlockToGrid = (shape, grid, x, y, rotation) => {\n    // At this point the game is not over\n    let blockOffGrid = false\n    const block = shapes[shape][rotation]\n    const newGrid = [ ...grid ]\n    for (let row = 0; row < block.length; row++) {\n      for (let col = 0; col < block[row].length; col++) {\n        if (block[row][col]) {\n          const yIndex = row + y\n          // If the yIndex is less than 0 part of the block\n          // is off the top of the screen and the game is over\n          if (yIndex < 0) {\n            blockOffGrid = true\n          } else {\n            newGrid[row + y][col + x] = shape\n          }\n        }\n      }\n    }\n    // Return both the newGrid and the gameOver bool                                                \n    return { grid: newGrid, gameOver: blockOffGrid }\n  }\n\n// Checks for completed rows and scores points\nexport const checkRows = (grid) => {\n    // Points increase for each row completed\n    // i.e. 40 points for completing one row, 100 points for two rows\n    const points = [0, 40, 100, 300, 1200]\n    let completedRows = 0\n    for (let row = 0; row < grid.length; row++) {\n      // No empty cells means it can't find a 0, so the row must be complete!\n      if (grid[row].indexOf(0) === -1) {\n        completedRows += 1\n        // Remove the row and add a new empty one at the top\n        grid.splice(row, 1)\n        grid.unshift(Array(10).fill(0))\n      }\n    }\n    return points[completedRows]\n  }","import {\n    MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n    PAUSE, RESUME, RESTART, GAME_OVER\n  } from '../actions'\n\n  import {\n    defaultState,\n    nextRotation,\n    canMoveTo,\n    addBlockToGrid,\n    checkRows,\n    \n  } from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n\n    switch(action.type) {\n    case ROTATE:\n      const newRotation = nextRotation(shape, rotation)\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n          return { ...state, rotation: newRotation }\n      }\n      return state\n  \n      case MOVE_RIGHT:\n    if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n      return { ...state, x: x + 1 }\n    }\n    return state\n  \n        case MOVE_LEFT:\n          // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n          if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n              return { ...state, x: x - 1 }\n          }\n          return state\n  \n          case MOVE_DOWN:\n          // Get the next potential Y position\n          const maybeY = y + 1\n        \n          // Check if the current block can move here\n          if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n              // If so move down don't place the block\n              return { ...state, y: maybeY }\n          }\n        \n          // If not place the block\n          // (this returns an object with a grid and gameover bool)\n          const obj = addBlockToGrid(shape, grid, x, y, rotation)\n          const newGrid = obj.grid\n          const gameOver = obj.gameOver\n        \n          if (gameOver) {\n            // Game Over\n            const newState = { ...state }\n            newState.shape = 0\n            newState.grid = newGrid\n            return { ...state, gameOver: true }\n          }\n        \n            // reset somethings to start a new shape/block\n            const newState = defaultState()\n            newState.grid = newGrid\n            newState.shape = nextShape\n            newState.score = score\n            newState.isRunning = isRunning\n\n            // TODO: Check and Set level\n            // Score increases decrease interval\n            newState.score = score + checkRows(newGrid)\n\n            return newState\n  \n      case RESUME:\n  \n        return { ...state, isRunning: true }\n  \n      case PAUSE:\n  \n        return { ...state, isRunning: false }\n  \n      case GAME_OVER:\n  \n        return state\n  \n      case RESTART:\n        return defaultState()\n\n      default:\n        return state\n    }\n  }\n  \n  export default gameReducer","export const PAUSE      = \"PAUSE\"       // Pause the game\nexport const RESUME     = \"RESUME\"      // Resume a paused game\nexport const MOVE_LEFT  = \"MOVE_LEFT\"   // Move piece left\nexport const MOVE_RIGHT = \"MOVE_RIGHT\"  // Move piece right\nexport const ROTATE     = \"ROTATE\"      // Rotate piece\nexport const MOVE_DOWN  = \"MOVE_DOWN\"   // Move piece down\nexport const GAME_OVER  = \"GAME_OVER\"   // The game is over\nexport const RESTART    = \"RESTART\"     // Restart Game\n\nexport const moveRight = () => {\n    return { type: MOVE_RIGHT }\n  }\n  \n  export const moveLeft = () => {\n    return { type: MOVE_LEFT }\n  }\n  \n  export const rotate = () => {\n    return { type: ROTATE }\n  }\n  \n  export const moveDown = () => {\n    return { type: MOVE_DOWN }\n  }\n  \n  export const pause = () => {\n    return { type: PAUSE }\n  }\n  \n  export const resume = () => {\n    return { type: RESUME }\n  }\n  \n  export const restart = () => {\n    return { type: RESTART }\n  }","import { combineReducers } from 'redux'\nimport gameReducer from './game-reducer'\n\n// The state handled by `gameReducer` will be stored with the property name `game` on the Redux store.\nconst reducers = combineReducers({\n  game: gameReducer\n})\n\nexport default reducers","import React from 'react'\n\n// Represents a grid square with a color\n\nexport default function GridSquare(props) {\n  const classes = `grid-square color-${props.color}`\n  return <div className={classes} />\n}","import React, { useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { moveDown } from '../actions'\nimport GridSquare from './GridSquare'\nimport { shapes } from '../utils'\n\nexport default function GridBoard(props) {\n\n    \n    const requestRef = useRef()\n\tconst lastUpdateTimeRef = useRef(0)\n\tconst progressTimeRef = useRef(0)\n    const dispatch = useDispatch()\n\tconst game = useSelector((state) => state.game)\n\tconst { grid, shape, rotation, x, y, isRunning, speed } = game\n\n\tconst block = shapes[shape][rotation]\n    const blockColor = shape\n    // map rows\n    const gridSquares = grid.map((rowArray, row) => {\n    // map columns\n    return rowArray.map((square, col) => {\n      // Find the block x and y on the shape grid\n      // By subtracting the x and y from the col and the row we get the position of the upper left corner of the block array as if it was superimposed over the main grid\n      const blockX = col - x\n      const blockY = row - y\n      let color = square\n      // Map current falling block to grid.\n      // For any squares that fall on the grid we need to look at the block array and see if there is a 1 in this case we use the block color.\n      if (blockX >= 0 && blockX < block.length && blockY >= 0 && blockY < block.length) {\n        color = block[blockY][blockX] === 0 ? color : blockColor\n      }\n      // Generate a unique key for every block\n      const k = row * grid[0].length + col;\n      // Generate a grid square\n      return <GridSquare\n              key={k}\n              color={color} />\n    })\n  })\n  const update = (time) => {\n    requestRef.current = requestAnimationFrame(update)\n    if (!isRunning) {\n        return \n    }\n    if (!lastUpdateTimeRef.current) {\n        lastUpdateTimeRef.current = time\n    }\n    const deltaTime = time - lastUpdateTimeRef.current\n    progressTimeRef.current += deltaTime\n    if (progressTimeRef.current > speed) {\n        dispatch(moveDown())\n        progressTimeRef.current = 0\n    }\n    lastUpdateTimeRef.current = time\n} \nuseEffect(() => {\n    requestRef.current = requestAnimationFrame(update)\n    return () => cancelAnimationFrame(requestRef.current)\n}, [isRunning])\n\treturn (\n\t\t<div className='grid-board'>\n\t\t\t{gridSquares}\n\t\t</div>\n\t)\n}","import React from 'react'\nimport GridSquare from './GridSquare'\n\nimport { useSelector } from 'react-redux'\nimport { shapes } from '../utils'\n\nexport default function NextBlock(props) {\n    const nextShape = useSelector((state) => state.game.nextShape)\n    const box = shapes[nextShape][0]\n    const grid = box.map((rowArray, row) => {\n        return rowArray.map((square,col) => {\n            return <GridSquare key={`${row}${col}`} color={square} />\n        })\n    })\n    return (\n        <div className=\"next-block\">\n            {grid}\n        </div>\n    )\n}","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { pause, resume, restart } from '../actions'\n\nexport default function ScoreBoard(props) {\n\tconst dispatch = useDispatch()\n\tconst game = useSelector((state) => state.game)\n\tconst { score, isRunning, gameOver } = game\n\n\treturn (\n\t\t<div className=\"score-board\">\n\t\t\t<div>Score:{ score }</div>\n\t\t\t<div>Level: 1</div>\n\t\t\t<button className=\"score-board-button\" onClick={(e) => {\n\t\t\t\tif (gameOver) { return }\n\t\t\t\tif (isRunning) {\n\t\t\t\t\tdispatch(pause())\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(resume())\n\t\t\t\t}\n\t\t\t}}>{isRunning ? 'Pause' : 'Play'}</button>\n\t\t\t<button className=\"score-board-button\" onClick={(e) => {\n\t\t\t\tdispatch(restart())\n\t\t\t}}>Restart</button>\n\t\t</div>\n\t)\n}","import React from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { moveDown, moveLeft, moveRight, rotate } from '../actions'\n\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\n\nexport default function Controls(props) {\n    const dispatch = useDispatch()\n\tconst isRunning = useSelector((state) => state.game.isRunning)\n    const gameOver = useSelector((state) => state.game.gameOver) \n\n\n\treturn (\n\t\t<div className={`controls`}>\n            <KeyboardEventHandler\n            handleKeys={['a','left']}\n            onKeyEvent={(key, e) => {\n                if (!isRunning || gameOver) { return } \n                dispatch(moveLeft())\n            }} />\n            \n\t\t\t{/* left */}\n\t\t\t<button \n\t\t\t\tdisabled={!isRunning || gameOver}\n\t\t\t\tclassName=\"control-button\" \n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tif (!isRunning || gameOver) { return } \n\t\t\t\t\tdispatch(moveLeft())\n\t\t\t\t}}>Left</button>\n\n            <KeyboardEventHandler\n            handleKeys={['d','right']}\n            onKeyEvent={(key, e) => {\n                if (!isRunning || gameOver) { return } \n                dispatch(moveRight())\n            }} />       \n\t\t\t{/* right */}\n\t\t\t<button \n\t\t\t\tdisabled={!isRunning || gameOver}\n\t\t\t\tclassName=\"control-button\" \n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tif (!isRunning || gameOver) { return } \n\t\t\t\t\tdispatch(moveRight())\n\t\t\t\t}}>Right</button>\n            <KeyboardEventHandler\n            handleKeys={['w','up']}\n            onKeyEvent={(key, e) => {\n                if (!isRunning || gameOver) { return } \n                dispatch(rotate())\n            }} />  \n\t\t\t{/* rotate */}\n\t\t\t<button \n\t\t\t\tdisabled={!isRunning || gameOver}\n\t\t\t\tclassName=\"control-button\" \n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tif (!isRunning || gameOver) { return } \n\t\t\t\t\tdispatch(rotate())\n\t\t\t\t}}>Rotate</button>\n            <KeyboardEventHandler\n            handleKeys={['s','down']}\n            onKeyEvent={(key, e) => {\n                if (!isRunning || gameOver) { return } \n                dispatch(moveDown())\n            }} />  \n\t\t\t{/* down */}\n\t\t\t<button \n\t\t\t\tdisabled={!isRunning || gameOver}\n\t\t\t\tclassName=\"control-button\" \n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tif (!isRunning || gameOver) { return } \n\t\t\t\t\tdispatch(moveDown())\n\t\t\t\t}}>Down</button>\n\n\t\t</div>\n\t)\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\n// Displays a message\nexport default function MessagePopup(props) {\n  const isRunning = useSelector((state) => state.game.isRunning)\n  const gameOver = useSelector((state) => state.game.gameOver)\n\n  let message = ''\n  let isHidden = 'hidden'\n\n  if (gameOver) {\n    message = 'Game Over'\n    isHidden = ''\n  } else if (!isRunning) {\n    message = 'Paused'\n    isHidden = ''\n  }\n\n  return (\n    <div className={`message-popup ${isHidden}`}>\n      <h1>{message}</h1>\n    </div>\n  )\n}","import React from 'react';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducers from './reducers'\n\nimport './App.css';\n\nimport GridBoard from './components/GridBoard'\nimport NextBlock from './components/NextBlock'\nimport ScoreBoard from './components/ScoreBoard'\nimport Controls from './components/Controls'\nimport MessagePopup from './components/MessagePopup'\n\nconst store = createStore(reducers)\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Tetris Redux</h1>\n        </header>\n        <GridBoard />\n        <NextBlock />\n        <ScoreBoard />\n        <Controls />\n        <MessagePopup />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}